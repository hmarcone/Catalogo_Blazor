    <EditForm Model="@Produto" OnValidSubmit="@OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label form="nome">Nome: </label>
            <div>
                <InputText @bind-Value="Produto.Nome" class="form-control" />
                <ValidationMessage For="@(()=> Produto.Nome)" />
            </div>
        </div>
        <div class="form-group">
            <label form="descricao">Descrição: </label>
            <div>
                <InputTextArea @bind-Value="Produto.Descricao" class="form-control" />
                <ValidationMessage For="@(()=> Produto.Descricao)" />
            </div>
        </div>
        <div class="form-group">
            <label form="preco">Preço: </label>
            <div>
                <InputNumber @bind-Value="Produto.Preco" class="form-control" />
                <ValidationMessage For="@(()=> Produto.Preco)" />
            </div>
        </div>
        <div class="form-group">
            <label form="categoria">Categoria: </label>
            <select @onchange="CategoriaSelectionChanged" class="form-control">
            @if(categorias != null)
            {
                <option value="0">Selecione uma categoria...</option>
                @foreach(var categoria in categorias)
                {
                    <option value="@categoria.CategoriaId">
                        @categoria.Nome
                    </option>
                }
            }
            </select>
        </div>
        <div class="form-group">
            <label form="categoria">Imagem: </label>
            <InputText @bind-Value="Produto.ImagemUrl" class="form-control" />
        </div>
        <br />
        <button type="submit" class="btn btn-success">
            @ButtonTextSubmit
        </button>
        <button class="btn btn-danger"
                @onclick="@(()=> navigation.NavigateTo("Produto"))">
            @ButtonTextCancelar
        </button>
    </EditForm>

@code {

    List<Categoria> categorias;

    [Inject]
    private NavigationManager navigation { get; set; }

    [Inject]
    private HttpClient http { get; set; }

    [Parameter]
    public Produto Produto { get; set; }

    [Parameter]
    public string ButtonTextSubmit { get; set; } = "Salvar";

    [Parameter]
    public string ButtonTextCancelar { get; set; } = "Cancelar";

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await CarregaCategorias();
    }

    private async Task CarregaCategorias()
    {
        categorias = await http.GetFromJsonAsync<List<Categoria>>("/api/categoria/todas");
    }

    void CategoriaSelectionChanged(ChangeEventArgs e)
    {
        if(int.TryParse(e.Value.ToString(), out int id))
        {
            Produto.CategoriaId = id;
        }
    }
}
