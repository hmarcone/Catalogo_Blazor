@page "/categoria"
@inject HttpClient  http
@using System.Text.Json

<div>
    <a class="btn btn-success" href="categoria/create">Nova Categoria</a>
</div>

<br/>

@if (categorias == null)
{
    <p><em>Carregando...</em></p>
}
else if (categorias.Count == 0)
{
    <p><em>Não existem categorias cadastradas...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Categoria</th>
                <th>Descrição</th>
                <th>Edita</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var categoria in categorias)
            {
                <tr>
                    <td>@categoria.Nome</td>
                    <td>@categoria.Descricao</td>
                    <td><a class="btn btn-primary" href="categoria/edit/@categoria.CategoriaId">Editar</a> </td>
                    <td><a class="btn btn-danger" @onclick="@(()=> DeletarCategoria(categoria.CategoriaId))">Deletar</a> </td>
                </tr>
            }
        </tbody>
    </table>
}

<Confirma @ref="confirma" onCancela="@CancelaConfirma" onConfirma="@DeletaConfirma">
    <div>Deseja realmente excluir este item ?</div>
</Confirma>

<hr />

<Paginacao QuantidadeTotalPaginas="QuantidadeTotalPaginas" paginaAtual="paginaAtual"
           Raio="2" PaginaSelecionada="PaginaSelecionada">

</Paginacao>

@code {

    List<Categoria> categorias { get; set; }

    private int QuantidadeTotalPaginas;
    private int paginaAtual = 1;

    Confirma confirma;

    int codigoCategoria;

    protected override async Task OnInitializedAsync()
    {
        await CarregaCategorias();
    }

    private async Task PaginaSelecionada(int pagina)
    {
        paginaAtual = pagina;
        await CarregaCategorias(pagina);
    }

    public async Task CarregaCategorias(int pagina = 1, int quantidadePorPagina = 5)
    {
        var httpResponse =
                    await http.GetAsync($"api/categoria?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}");

        if (httpResponse.IsSuccessStatusCode)
        {
            QuantidadeTotalPaginas =
                int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());

            var responseString = await httpResponse.Content.ReadAsStringAsync();

            categorias = JsonSerializer.Deserialize<List<Categoria>>(responseString,
                new JsonSerializerOptions()
                {
                    PropertyNameCaseInsensitive = true
                });
        }
        //categorias = await http.GetFromJsonAsync<List<Categoria>>("/api/categoria");
        //categorias = new List<Categoria>
        //{
        //    new Categoria()
        //    {
        //        CategoriaId = 1,
        //        Nome = "Eletrônicos",
        //        Descricao = "Produtos eletrônicos"
        //    },
        //    new Categoria()
        //    {
        //        CategoriaId = 2,
        //        Nome = "Smartphones",
        //        Descricao = "Dispositivos Smartphones"
        //    }
        //};
    }

    void DeletarCategoria(int categoriaId)
    {
        confirma.Exibir();
        codigoCategoria = categoriaId;
    }

    async Task DeletaConfirma()
    {
        await http.DeleteAsync($"api/categoria/{codigoCategoria}");
        confirma.Ocultar();
        await CarregaCategorias();
    }

    void CancelaConfirma()
    {
        confirma.Ocultar();
    }

}
